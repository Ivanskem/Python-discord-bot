import nextcord
import requests
import datetime
from datetime import timedelta
import os
import logging
import openai
from nextcord.ext import commands, tasks
from nextcord import Interaction, SlashOption, ButtonStyle, ChannelType
from nextcord.errors import Forbidden
from nextcord.ui import Button, View, UserSelect, Select, TextInput, Modal
import asyncio
import time
import sys
import shutil
from win10toast import ToastNotifier
import sqlite3
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import json
# import flet as ft
intents = nextcord.Intents.default()
intents.invites = True
intents.message_content = True
intents.members = True
intents.guilds = True
intents.bans = True
intents.moderation = True
logging.basicConfig(filename="log.log",
                    level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

client_discord = nextcord.Client(intents=intents)
scheduler = AsyncIOScheduler()

API_Weather = 'get your api key on openweathermap.org/api'
API_Crypto = 'get your api key on https://pro.coinmarketcap.com/account'
Forbidden_words = ['enter you list of forbidden words']
guild_owner_emodji_id = 'add id of your emodji'
guild_owner_emodji = f"<:customemoji:{guild_owner_emodji_id}>"
verification_level_emodji_id = 'add id of your emodji'
verification_level_emodji = f"<:customemoji:{verification_level_emodji_id}>"
created_since_emodji_id = 'add id of your emodji'
created_since_emodji = f"<:customemoji:{created_since_emodji_id}>"
all_categories_emodji_id = 'add id of your emodji'
all_categories_emodji = f"<:customemoji:{all_categories_emodji_id}>"
categories_emodji_id = 'add id of your emodji'
categories_emodji = f"<:customemoji:{categories_emodji_id}>"
members_emodji_id = 'add id of your emodji'
members_emodji = f"<:customemoji:{members_emodji_id}>"
member_emodji_id = 'add id of your emodji'
member_emodji = f"<:customemoji:{member_emodji_id}>"
boost_emodji_id = 'add id of your emodji'
boost_emodji = f"<:customemoji:{boost_emodji_id}>"
voice_emodji_id = 'add id of your emodji'
voice_emodji = f"<:customemoji:{voice_emodji_id}>"
reason_emodji_id = 'add id of your emodji'
reason_emodji = f"<:customemoji:{reason_emodji_id}>"
telegram_channels_link = 'Your link to telegram chat/channel'
discord_server_link = 'Your link to discord server'
servername_to_footer = 'enter name of server'
servername_database = 'enter name of server'
staff_emodji_id = 'add id of your emodji'
staff_emodji = f"<:customemoji:{staff_emodji_id}>"
warn_emodji_id = 'add id of your emodji'
warn_emodji = f"<:customemoji:{warn_emodji_id}>"
time_emodji_id = 'add id of your emodji'
time_emodji = f"<:customemoji:{time_emodji_id}>"
text_emodji_id = 'add id of your emodji'
text_emodji = f"<:customemoji:{text_emodji_id}>"
slash_emodji_id = 'add id of your emodji'
slash_emodji = f"<:customemoji:{slash_emodji_id}>"
bot_emodji_id = 'add id of your emodji'
bot_emodji = f"<:customemoji:{bot_emodji_id}>"
telegram_emodji_id = 'add id of your emodji'
telegram_emodji = f"<:customemoji:{telegram_emodji_id}>"
discord_emodji_id = 'add id of your emodji'
discord_emodji = f"<:customemoji:{discord_emodji_id}>"
link_emodji_id = 'add id of your emodji'
link_emodji = f"<:customemoji:{link_emodji_id}>"
BTC_emodji_id = 'add id of your emodji'
BTC_emodji = f"<:customemoji:{BTC_emodji_id}>"
ETH_emodji_id = 'add id of your emodji'
ETH_emodji = f"<:customemoji:{ETH_emodji_id}>"
DOGE_emodji_id = 'add id of your emodji'
DOGE_emodji = f"<:customemoji:{DOGE_emodji_id}>"
RUB_emodji_id = 'add id of your emodji'
RUB_emodji = f"<:customemoji:{RUB_emodji_id}>"
USD_emodji_id = 'add id of your emodji'
USD_emodji = f"<:customemoji:{USD_emodji_id}>"
USDT_emodji_id = 'add id of your emodji'
USDT_emodji = f"<:customemoji:{USDT_emodji_id}>"
BUSD_emodji_id = 'add id of your emodji'
BUSD_emodji = f"<:customemoji:{BUSD_emodji_id}>"
SHIB_emodji_id = 'add id of your emodji'
SHIB_emodji = f"<:customemoji:{SHIB_emodji_id}>"
ELON_emodji_id = 'add id of your emodji'
ELON_emodji = f"<:customemoji:{ELON_emodji_id}>"
AKITA_emodji_id = 'add id of your emodji'
AKITA_emodji = f"<:customemoji:{AKITA_emodji_id}>"
Coinmarket_emodji_id = 'add id of your emodji'
Coinmarket_emodji = f"<:customemoji:{Coinmarket_emodji_id}>"
Right_emodji_id = 'add id of your emodji'
Right_emodji = f"<:customemoji:{Right_emodji_id}>"
LTC_emodji_id = 'add id of your emodji'
LTC_emodji = f"<:customemoji:{LTC_emodji_id}>"
SOL_emodji_id = 'add id of your emodji'
SOL_emodji = f"<:customemoji:{SOL_emodji_id}>"
BNB_emodji_id = 'add id of your emodji'
BNB_emodji = f"<:customemoji:{BNB_emodji_id}>"
USDC_emodji_id = 'add id of your emodji'
USDC_emodji = f"<:customemoji:{USDC_emodji_id}>"
XRP_emodji_id = 'add id of your emodji'
XRP_emodji = f"<:customemoji:{XRP_emodji_id}>"
HMSTR_emodji_id = 'add id of your emodji'
HMSTR_emodji = f"<:customemoji:{HMSTR_emodji_id}>"
TON_emodji_id = 'add id of your emodji'
TON_emodji = f"<:customemoji:{TON_emodji_id}>"
admin_tickets = "Enter you're admin tickets channel id"
link = {
    "main": "enter your link",
    "shedules": 'enter your link',
    "login": 'enter your link'
}
author_link = {
    "main": "https://github.com/Ivanskem",
    "bot-repositori": "https://github.com/Ivanskem/Python-discord-bot",
    "other-repositories": "https://github.com/Ivanskem?tab=repositories"
}

class Getrole(Select):
    def __init__(self):
        options = [
            nextcord.SelectOption(label="R-71", description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –†-71",
                                  emoji="üòâ"),
            nextcord.SelectOption(label="R-72", description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –†-72",
                                  emoji="üòâ"),
            nextcord.SelectOption(label="IE-71", description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ò–≠-71",
                                  emoji="üòâ"),
            nextcord.SelectOption(label="IE-72", description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ò–≠-72",
                                  emoji="üòâ"),
            nextcord.SelectOption(label="II-71", description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ò–ò-71",
                                  emoji="üòâ"),
            nextcord.SelectOption(label="II-72", description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ò–ò-72",
                                  emoji="üòâ")
        ]
        super().__init__(placeholder='–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É', min_values=1, max_values=1, options=options)

    async def callback(self, interaction: Interaction):
        R_71 = nextcord.utils.get(interaction.guild.roles, name='–£—á–µ–Ω–∏–∫ –†-71')
        R_72 = nextcord.utils.get(interaction.guild.roles, name='–£—á–µ–Ω–∏–∫ –†-72')
        IE_71 = nextcord.utils.get(interaction.guild.roles, name='–£—á–µ–Ω–∏–∫ –ò–≠-71')
        IE_72 = nextcord.utils.get(interaction.guild.roles, name='–£—á–µ–Ω–∏–∫ –ò–≠-72')
        II_71 = nextcord.utils.get(interaction.guild.roles, name='–£—á–µ–Ω–∏–∫ –ò–ò-71')
        II_72 = nextcord.utils.get(interaction.guild.roles, name='–£—á–µ–Ω–∏–∫ –ò–ò-72')

        picked_group = self.values[0]

        if picked_group == 'R-71':
            await interaction.user.add_roles(R_71, reason='Clicked getrole')
            await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –†-71 –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞', ephemeral=True)
        elif picked_group == 'R-72':
            await interaction.user.add_roles(R_72, reason='Clicked getrole')
            await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –†-72 –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞', ephemeral=True)
        elif picked_group == 'IE-71':
            await interaction.user.add_roles(IE_71, reason='Clicked getrole')
            await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ò–≠-71 –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞', ephemeral=True)
        elif picked_group == 'IE-72':
            await interaction.user.add_roles(IE_72, reason='Clicked getrole')
            await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ò–≠-72 –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞', ephemeral=True)
        elif picked_group == 'II-71':
            await interaction.user.add_roles(II_71, reason='Clicked getrole')
            await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ò–ò-71 –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞', ephemeral=True)
        elif picked_group == 'II-72':
            await interaction.user.add_roles(II_72, reason='Clicked getrole')
            await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ò–ò-72 –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞', ephemeral=True)


class GetroleView(View):
    def __init__(self):
        super().__init__()
        self.add_item(Getrole())


class Verify(Select):
    def __init__(self):
        options = [
            nextcord.SelectOption(label="Verify", description='–í—ã–¥–∞—ë—Ç —Ä–æ–ª—å "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"',
                                  emoji="‚úî")
        ]
        super().__init__(placeholder="–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: Interaction):
        verify_role = nextcord.utils.get(interaction.guild.roles, name='–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω‚úÖÔ∏è')
        if nextcord.utils.get(interaction.user.roles, name=verify_role) is not None:
            await interaction.response.send_message(f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å', ephemeral=True)
        else:
            await interaction.user.add_roles(verify_role, reason='Clicked Verify')
            await interaction.response.send_message(f'{interaction.user.mention} –í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å <@&1246041998054522880>', ephemeral=True)


class VerifyView(View):
    def __init__(self):
        super().__init__()
        self.add_item(Verify())


class Ticket(Select):
    def __init__(self):
        options = [
            nextcord.SelectOption(label='Support', description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
                                  emoji="üõ†"),
            nextcord.SelectOption(label="Bot", description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–∏–±–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –±–æ—Ç–∞",
                                  emoji="ü§ñ")
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: Interaction):
        category = self.values[0]
        await interaction.response.send_message(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {category}', ephemeral=True)
        await self.create_ticket(interaction, category)

    async def create_ticket(self, interaction: Interaction, category: str):
        channel_name = f'ticket-{interaction.user.name}'.replace(" ", "-").lower()
        member = interaction.user
        admin_role = nextcord.utils.get(interaction.guild.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        bot = interaction.guild.me
        default_role = interaction.guild.default_role
        overwrites = {
            default_role: nextcord.PermissionOverwrite(view_channel=False),
            member: nextcord.PermissionOverwrite(view_channel=True, send_messages=True),
            bot: nextcord.PermissionOverwrite(view_channel=True, send_messages=True),
            admin_role: nextcord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        category_channel = nextcord.utils.get(interaction.guild.categories, name='–æ–±—Ä–∞—â–µ–Ω–∏—è')
        if category_channel is None:
            category_channel = await interaction.guild.create_category(name='–æ–±—Ä–∞—â–µ–Ω–∏—è')

        ticket_channel = await interaction.guild.create_text_channel(name=channel_name, overwrites=overwrites,
                                                                     category=category_channel)
        action_view = TicketActionView()
        admin_tickets_id = await interaction.guild.fetch_channel(admin_tickets)
        channel_id = nextcord.utils.get(interaction.guild.channels, name=channel_name)
        embed = nextcord.Embed(title='–û–±—Ä–∞—â–µ–Ω–∏–µ', color=0xffffff)
        embed.add_field(name=f'{created_since_emodji} –û–±—Ä–∞—â–µ–Ω–∏–µ: {member.name}',
                        value=f'{slash_emodji} ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: {category}.\n'
                              f'{member_emodji} ‚Ä¢ –°–æ–∑–¥–∞–ª: {interaction.user.mention}')
        embed_admin = nextcord.Embed(title=f'–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', color=0xffffff)
        embed_admin.add_field(name=f'{created_since_emodji} –¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç: {interaction.user.name}',
                              value=f'{created_since_emodji} ‚Ä¢ –ö–∞–Ω–∞–ª: <#{channel_id.id}>\n'
                                    f'{member_emodji} ‚Ä¢ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–ª {interaction.user.name}')
        embed_admin.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Tickets | {datetime.datetime.now().replace(microsecond=0)}',
            icon_url=interaction.guild.icon.url)
        await admin_tickets_id.send(embed=embed_admin)
        await ticket_channel.send(embed=embed, view=action_view)


class TicketView(View):
    def __init__(self):
        super().__init__()
        self.add_item(Ticket())


class TicketAction(Select):
    def __init__(self):
        options = [
            nextcord.SelectOption(label='Close Ticket', description="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
                                  emoji="‚ùå"),
            nextcord.SelectOption(label="Leave Feedback", description="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                                  emoji="‚úç")
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: Interaction):
        action = self.values[0]
        try:
            if action == 'Close Ticket':
                await interaction.response.send_modal(CloseTicketModal())
            elif action == 'Leave Feedback':
                await interaction.response.send_modal(FeedbackModal())
        except Exception:
            await interaction.response.send_message(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', ephemeral=True)


class TicketActionView(View):
    def __init__(self):
        super().__init__()
        self.add_item(TicketAction())


class CloseTicketModal(Modal):
    def __init__(self):
        super().__init__(title='–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞')
        self.reason = TextInput(label='–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', style=nextcord.TextInputStyle.paragraph)
        self.add_item(self.reason)

    async def callback(self, interaction: Interaction):
        logger = logging.getLogger(__name)
        reason = self.reason.value
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π {reason}')
        database_location = sqlite3.connect(f'{servername_database}_discord.db')
        cursor = database_location.cursor()
        cursor.execute(
            "INSERT INTO tickets_history (guild_id, user_id, feedback_reason, close_date) VALUES (?, ?, ?, ?)",
            (interaction.guild.id, interaction.user.id, reason,
             datetime.datetime.now().replace(microsecond=0))
        )
        database_location.commit()
        database_location.close()

        channel_id = interaction.channel_id
        admin_tickets_id = await interaction.guild.fetch_channel(admin_tickets)
        embed_channel = nextcord.Embed(title=f'–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', color=0xffffff)
        embed_channel.add_field(name=f'{created_since_emodji} –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–ª: {interaction.user.name}',
                                value=f'{slash_emodji} ‚Ä¢ –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}\n'
                                      f'{warn_emodji} ‚Ä¢ –¢–∏–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç')
        embed_channel.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Tickets | {datetime.datetime.now().replace(microsecond=0)}',
            icon_url=interaction.guild.icon.url)
        embed_admin = nextcord.Embed(title=f'–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', color=0xffffff)
        embed_admin.add_field(name=f'{created_since_emodji} –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–ª: {interaction.user.name}',
                              value=f'{slash_emodji} ‚Ä¢ –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}\n'
                                    f'{created_since_emodji} ‚Ä¢ –ö–∞–Ω–∞–ª: <#{channel_id}>')
        embed_admin.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Tickets | {datetime.datetime.now().replace(microsecond=0)}',
            icon_url=interaction.guild.icon.url)
        await interaction.channel.send(embed=embed_channel)
        await admin_tickets_id.send(embed=embed_admin)
        await asyncio.sleep(600)
        try:
            await interaction.channel.delete()
        except nextcord.errors.NotFound:
            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è!')


class FeedbackModal(Modal):
    def __init__(self):
        super().__init__(title="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
        self.feedback = TextInput(label="–û—Ç–∑—ã–≤", style=nextcord.TextInputStyle.paragraph)
        self.add_item(self.feedback)

    async def callback(self, interaction: nextcord.Interaction):
        logger = logging.getLogger(__name__)
        feedback = self.feedback.value
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ {feedback}')
        database_location = sqlite3.connect(f'{servername_database}_discord.db')
        cursor = database_location.cursor()
        cursor.execute(
            "INSERT INTO tickets_history (guild_id, user_id, feedback_reason, close_date) VALUES (?, ?, ?, ?)",
            (interaction.guild.id, interaction.user.id, feedback,
             datetime.datetime.now().replace(microsecond=0))
        )
        database_location.commit()
        database_location.close()
        channel_id = interaction.channel_id
        admin_tickets_id = await interaction.guild.fetch_channel(admin_tickets)
        embed_channel = nextcord.Embed(title=f'–û—Ç–∑—ã–≤', color=0xffffff)
        embed_channel.add_field(name=f'{created_since_emodji} –û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–∏–ª: {interaction.user.name}',
                                value=f'{slash_emodji} ‚Ä¢ –û—Ç–∑—ã–≤: {feedback}\n'
                                      f'{warn_emodji} ‚Ä¢ –ü—Ä–æ—Å—å–±–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ')
        embed_channel.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Tickets | {datetime.datetime.now().replace(microsecond=0)}',
            icon_url=interaction.guild.icon.url)
        embed_admin = nextcord.Embed(title=f'–û—Ç–∑—ã–≤', color=0xffffff)
        embed_admin.add_field(name=f'{created_since_emodji} –û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–∏–ª: {interaction.user.name}',
                              value=f'{slash_emodji} ‚Ä¢ –û—Ç–∑—ã–≤: {feedback}\n'
                                    f'{created_since_emodji} ‚Ä¢ –ö–∞–Ω–∞–ª: <#{channel_id}>')
        embed_admin.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Tickets | {datetime.datetime.now().replace(microsecond=0)}',
            icon_url=interaction.guild.icon.url)
        await interaction.channel.send(embed=embed_channel)
        await admin_tickets_id.send(embed=embed_admin)


try:
    with open('Openai_API.txt', 'r') as f:
        openai.api_key = f.read().strip()
except FileNotFoundError:
    openai.api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–ø–∏ –¥–ª—è ChatGPT: ")
    with open('Openai_API.txt', 'w') as f:
        f.write(openai.api_key)

try:
    with open('token.txt', 'r') as f:
        TOKEN = f.read().strip()
except FileNotFoundError:
    TOKEN = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Discord: ")
    with open('token.txt', 'w') as f:
        f.write(TOKEN)


def read_json(json_file):
    try:
        with open(json_file, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return None
    except json.JSONDecodeError:
        return None


def giveaway_add(json_file, data):
    with open(json_file, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4)


def win_notification(title, message):
    toaster = ToastNotifier()
    toaster.show_toast(title, message, duration=0, threaded=True)


async def send_server_info():
    logger = logging.getLogger(__name__)
    logger.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ | {datetime.datetime.now().replace(microsecond=0)}')
    channel = client_discord.get_channel(channel_stat)
    if channel:
        guild = channel.guild
    else:
        logger.error(f'–ö–∞–Ω–∞–ª —Å –∞–π–¥–∏ {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    async for msg in channel.history(limit=1):
        await msg.delete()
    bots = sum(1 for member in guild.members if member.bot)
    total_members = guild.member_count
    without_bot = total_members - bots
    time = datetime.datetime.now().replace(microsecond=0)

    server_owner = guild.owner.mention
    if server_owner == None:
        server_owner = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    verification_level = guild.verification_level
    if verification_level == guild.verification_level.low:
        verification_level_show = '–ù–∏–∑–∫–∏–π'
    elif verification_level == guild.verification_level.medium:
        verification_level_show = '–°—Ä–µ–¥–Ω–∏–π'
    elif verification_level == guild.verification_level.high:
        verification_level_show = '–í—ã—Å–æ–∫–∏–π'
    else:
        verification_level_show = '–ù–µ—Ç'
    created_at = guild.created_at
    text_channels = len(guild.text_channels)
    voice_channels = len(guild.voice_channels)
    categories = len(guild.categories)

    embed = nextcord.Embed(title=guild.name, color=0x6fa8dc)
    embed.set_thumbnail(url=guild.icon.url)
    embed.add_field(name='–û—Å–Ω–æ–≤–Ω–æ–µ', value=f'{guild_owner_emodji} –í–ª–∞–¥–µ–ª–µ—Ü: {server_owner}\n'
                                           f'{verification_level_emodji} –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {verification_level_show}\n'
                                           f'{created_since_emodji} –°–æ–∑–¥–∞–Ω: <t:{int(created_at.timestamp())}:F>\n(<t:{int(created_at.timestamp())}:R>)\n'
                                           f'{slash_emodji} –í—Å–µ–≥–æ {text_channels + voice_channels + categories} –∫–∞–Ω–∞–ª–æ–≤\n'
                                           f'{text_emodji} –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: {text_channels}\n'
                                           f'{voice_emodji} –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: {voice_channels}\n'
                                           f'{categories_emodji} –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n')
    embed.add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value=f'{members_emodji} –í—Å–µ–≥–æ {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n'
                                               f'{bot_emodji} –ë–æ—Ç–æ–≤: {bots}\n'
                                               f'{member_emodji} –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {without_bot}\n')
    boost_level = guild.premium_tier
    embed.add_field(name='–ë—É—Å—Ç—ã',
                    value=f'{boost_emodji} –£—Ä–æ–≤–µ–Ω—å: {boost_level} (–±—É—Å—Ç–æ–≤ - {guild.premium_subscription_count})\n')
    embed.add_field(name='–°—Å—ã–ª–∫–∏', value=f'{telegram_emodji} Telegram-–∫–∞–Ω–∞–ª: {telegram_channels_link} \n'
                                         f'{discord_emodji} Discord-—Å–µ—Ä–≤–µ—Ä: {discord_server_link}\n')
    embed.set_footer(text=f'‚Ä¢ –ó–∞–ø—Ä–æ—Å –æ—Ç {interaction.user}\n‚Ä¢ {servername_to_footer} Info {time}',
                     icon_url=interaction.user.avatar.url)
    await channel.send(embed=embed)


async def warn(interaction, guild_id, user_id, user_name, guild):
    admin_role = nextcord.utils.get(interaction.guild.roles, name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    database_location = sqlite3.connect(f'{servername_database}_discord.db')
    cursor = database_location.cursor()
    cursor.execute("SELECT warns FROM warn_list WHERE guild_id=? AND user_id=?",
                   (guild_id, user_id))
    result = cursor.fetchone()
    if result is None:
        cursor.execute("INSERT INTO warn_list (guild_id, user_id, warns) VALUES (?, ?, ?)",
                       (guild_id, user_id, 1))
    else:
        current_warns = result[0]
        cursor.execute("UPDATE warn_list SET warns=?, last_warn_time=? WHERE guild_id=? AND user_id=?",
                       (current_warns + 1, datetime.datetime.now(), guild_id, user_id))
    cursor.execute("SELECT warns FROM warn_list WHERE guild_id=? AND user_id=?",
                   (guild_id, user_id))
    result = cursor.fetchone()
    warn_count = result[0]
    database_location.commit()
    reason = '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è!'
    embed = nextcord.Embed(title=f'{created_since_emodji} –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', color=nextcord.Color.dark_purple())
    embed.add_field(name=f'{member_emodji} {user_name} –≤–∞—à –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n'
                         f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                         f'{warn_emodji} –£ –≤–∞—Å {warn_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ', value='')
    embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Warn | {datetime.datetime.now().replace(microsecond=0)}',
                     icon_url=interaction.guild.icon.url)
    await interaction.channel.send(embed=embed)
    if warn_count >= 5:
        await interaction.user.remove_roles(admin_role, reason='too many warns')
        embed_warn = nextcord.Embed(title=f'{created_since_emodji} –°–Ω—è—Ç–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', color=nextcord.Color.red())
        embed_warn.add_field(name=f'{member_emodji} {user_name} –í—ã —Å–Ω—è—Ç—ã —Å –ø–æ—Å—Ç–∞ –∞–¥–Ω–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
                             value=f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n'
                                   f'{warn_emodji} –ß—Ç–æ–±—ã –æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è')
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Reset | {datetime.datetime.now().replace(microsecond=0)}',
                         icon_url=interaction.guild.icon.url)
        cursor.execute("UPDATE warn_list SET warns = 0 WHERE user_id = ?", (member.id,))
        database_location.commit()
        database_location.close()
        await interaction.channel.send(embed=embed_warn)


@client_discord.event
async def on_reaction_add(reaction: nextcord.Reaction, user: nextcord.User):
    if user.bot:
        return

    json_file = 'jsons/giveaway.json'
    giveaways = read_json(json_file)

    for giveaway in giveaways:
        if giveaway['message_id'] == reaction.message.id and reaction.emoji == 'üéâ':
            users = await reaction.users().flatten()
            users = [user for user in users if not user.bot]

            if users:
                winner = random.choice(users)
                await reaction.message.channel.send(
                    f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {winner.mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à {giveaway["name"]}!')
            else:
                await reaction.message.channel.send('–£—á–∞—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç!')
            giveaways.remove(giveaway)
            giveaway_add(json_file, giveaways)
            break


@client_discord.event
async def on_ready():
    print(f'{client_discord.user} –∑–∞–ø—É—â–µ–Ω')
    print(' ')
    message = f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: /ban –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∏—á–∏–Ω–∞ \n–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: /unban –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∏—á–∏–Ω–∞ \n–£–¥–∞–ª–µ–Ω–∏–µ: /kick –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∏—á–∏–Ω–∞ \n–û—Ç—á–∏—Å—Ç–∫–∞: /clear –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(–º–æ–∂–Ω–æ –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∏–±–æ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ) \n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Ç–Ω–∏–∫–æ–≤: /members \n–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: /serverinfo \n–ó–∞–≥–ª—É—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: /mute –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∏—á–∏–Ω–∞"f" \n–†–∞–∑–≥–ª—É—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: /unmute –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∏—á–∏–Ω–∞ \n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ: /info –£—á–∞—Å—Ç–Ω–∏–∫ \n–ê–≤–∞—Ç–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: /avatar –£—á–∞—Å—Ç–Ω–∏–∫ \n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ: /weather –ì–æ—Ä–æ–¥(–ª—é–±–æ–π) \n–í—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: /commands (–≤ –∫–∞–Ω–∞–ª #bot-commands, –Ω–µ –ø–∏—Å–∞—Ç—å) \n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: /say (—Å–æ–æ–±—â–µ–Ω–∏–µ)"
    print(message)
    scheduler.add_job(send_server_info, 'interval', days=7)
    scheduler.start()
    database_location = sqlite3.connect(f'{servername_database}_discord.db')
    cursor = database_location.cursor()
    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS users_list (
                            user_id INTEGER PRIMARY KEY,
                            user_name TEXT NOT NULL,
                            user_mention TEXT NOT NULL,
                            user_joined_date DATETIME NOT NULL
                        )
                    ''')
    cursor.execute("""
            CREATE TABLE IF NOT EXISTS mod_actions (
                action_id INTEGER PRIMARY KEY AUTOINCREMENT,
                action_type TEXT NOT NULL,
                guild_id INTEGER NOT NULL,
                moderator_name TEXT NOT NULL,
                moderator_id INTEGER NOT NULL,
                target_user_name TEXT NOT NULL,
                target_user_id INTEGER NOT NULL,
                reason TEXT,
                action_time DATETIME NOT NULL
            )
        """)
    cursor.execute("""
            CREATE TABLE IF NOT EXISTS warn_list (
                guild_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                warns INTEGER DEFAULT 0,
                last_warn_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    cursor.execute("""
            CREATE TABLE IF NOT EXISTS tickets_history (
                guild_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                feedback_reason TEXT NOT NULL,
                close_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    database_location.commit()
    database_location.close()
    win_notification("Bot Started", f"–î–∏—Å–∫–æ—Ä–¥ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω\n{servername_database}_discord.db started\nTime: {datetime.datetime.now().replace(microsecond=0)}")


@client_discord.event
async def on_disconnect():
    scheduler.shutdown()
    print(f'–ë–æ—Ç {client_discord.user} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫')
    await asyncio.sleep(10)
    await client_discord.connect(reconnect=False)


@client_discord.event
async def on_member_join(member):
    user_id = member.id
    user_name = member.name
    user_mention = member.mention
    user_joined_date = member.joined_at

    logger = logging.getLogger(__name__)
    logger.info(f'–ö —Å–µ—Ä–≤–µ—Ä—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_name}')

    try:
        database_location = sqlite3.connect(f'{servername_database}_discord.db')
        cursor = database_location.cursor()
        cursor.execute("INSERT INTO users_list (user_id, user_name, user_mention, user_joined_date) VALUES (?, ?, ?, ?)",
                       (user_id, user_name, user_mention, user_joined_date))
        database_location.commit()
    except sqlite3.Error as e:
        logger.error(f'Something went wrong. Error: {e}')
    finally:
        database_location.close()

    embed_server = nextcord.Embed(
        title=f'–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä "{servername_database}"',
        color=nextcord.Color.purple()
    )
    if member.avatar:
        embed_server.set_thumbnail(url=member.avatar.url)
    else:
        embed_server.set_thumbnail(url='https://cdn.discordapp.com/embed/avatars/0.png')

    embed_server.add_field(name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', value='–ò—â–∏ –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"')
    embed_server.set_footer(text=f'‚Ä¢ {servername_to_footer} Welcome | {datetime.datetime.now().replace(microsecond=0)}',
                            icon_url=member.guild.icon.url)

    embed_user = nextcord.Embed(
        title=f'–ü—Ä–∏–≤–µ—Ç, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É "{servername_database}"',
        color=nextcord.Color.purple()
    )
    if member.avatar:
        embed_user.set_thumbnail(url=member.avatar.url)
    else:
        embed_user.set_thumbnail(url='https://cdn.discordapp.com/embed/avatars/0.png')
    embed_user.add_field(name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', value=f'–í—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".')
    embed_user.set_footer(text=f'‚Ä¢ {servername_to_footer} Welcome | {datetime.datetime.now().replace(microsecond=0)}',
                          icon_url=member.guild.icon.url)

    channel = nextcord.utils.get(member.guild.channels, name='–¥–æ–±—Ä–æ-–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')
    if channel:
        await channel.send(embed=embed_server)
    else:
        logger.error(f'–ö–∞–Ω–∞–ª admin –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª!')
    try:
        await member.send(embed=embed_user)
    except nextcord.errors.HTTPException:
        logger.warning(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º –∏–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!')


@client_discord.event
async def on_member_leave(member):
    embed_server = nextcord.Embed(title=f'–£–¥–∞—á–∏, —É—á–∞—Å—Ç–Ω–∏–∫ {member.name} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä "{servername_database}"',
                                  color=nextcord.Color.dark_blue())
    embed_server.set_thumbnail(url=member.avatar.url)
    embed_server.add_field(name='', value='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä, —É–¥–∞—á–∏ –µ–º—É!')
    embed_server.set_footer(text=f'{servername_database} Goodbye | {datetime.datetime.now().replace(microsecond=0)}')

    embed_user = nextcord.Embed(title=f'–£–¥–∞—á–∏, –≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä "{servername_database}"',
                                color=nextcord.Color.purple())
    embed_user.set_thumbnail(url=member.avatar.url)
    embed_user.add_field(name=' ', value=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä, —É–¥–∞—á–∏ –≤–∞–º!')
    embed_user.set_footer(text=f'{servername_database} Goodbye | {datetime.datetime.now().replace(microsecond=0)}')
    channel = nextcord.utils.get(member.guild.channels, name='admin')
    if channel:
        await channel.send(embed=embed_server)
    else:
        logger.error(f'–ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª!')
    await member.send(embed=embed_user)


@client_discord.event
async def on_message(message):
    for word in Forbidden_words:
        if word in message.content:
            if any(role.name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" for role in message.author.roles):
                return
            else:
                async for msg in message.channel.history(limit=1):
                    await msg.delete()
                await message.channel.send(f'{message.author.mention}. –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –ü—Ä–æ—Å—å–±–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å.')
                return


@client_discord.slash_command(name='ban', description='–ë–ª–æ–∫–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def ban(interaction: Interaction, member: nextcord.Member,
              reason: str = SlashOption(
                  description="–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞",
                  default="–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
              )):
    logger = logging.getLogger(__name__)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
        try:
            await member.ban(reason=reason)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {interaction.user.mention} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}')
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("""
                    INSERT INTO mod_actions (action_type, guild_id, moderator_name, moderator_id, target_user_name, target_user_id, reason, action_time) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, ('Ban', interaction.guild.id, interaction.user.name, interaction.user.id, member.name, member.id, reason,
                      datetime.datetime.now()))
                cursor.close()
                database_location.commit()
            except sqlite3.Error as e:
                logger.error(f'Something went wrong! Error: {e}')
            finally:
                database_location.close()
            if reason in ['–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']:
                await warn(interaction, interaction.guild.id, interaction.user.id,
                           interaction.user.name, interaction.guild)
            embed = nextcord.Embed(title=f"{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", color=nextcord.Color.dark_purple())
            embed.add_field(name=' ', value=f'{staff_emodji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {interaction.user.mention}\n'
                                            f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                                            f'{member_emodji} –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {member.mention}\n')
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Moderation |'
                                  f' {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed)
        except nextcord.Forbidden:
            logger.error('–£ –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
            await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                    ephemeral=True)
    else:
        logger.info(f'–£ {interaction.user.mention} –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                ephemeral=True)


@client_discord.slash_command(name='warn', description='–í—ã–¥–∞—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É')
async def warn_command(interaction: Interaction, member: nextcord.Member,
                       action: str = SlashOption(description='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                                 choices=['show', 'give'],
                                                 default='show'),
                       reason: str = SlashOption(description='–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
                                                 default='–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                       )):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
        if action == 'show':
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("SELECT warns FROM warn_list WHERE guild_id=? AND user_id=?",
                               (interaction.guild.id, member.id))
                warn_count = cursor.fetchone()
                cursor.execute("SELECT last_warn_time FROM warn_list WHERE guild_id=? AND user_id=?",
                               (interaction.guild.id, member.id))
                warn_last = cursor.fetchone()
            except sqlite3.Error as e:
                await interaction.response.send_message(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}', ephemeral=True)
            try:
                embed = nextcord.Embed(title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {member.name}', color=nextcord.Color.dark_purple())
                embed.add_field(name=' ', value=f'{warn_emodji} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warn_count[0]}\n'
                                                f'{time_emodji} –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warn_last[0]}')
                embed.set_footer(text=f'‚Ä¢{servername_to_footer} Warn | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                                 icon_url=interaction.guild.icon.url)
                await interaction.response.send_message(embed=embed, ephemeral=True)
            except TypeError:
                embed = nextcord.Embed(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', color=nextcord.Color.dark_purple())
                embed.add_field(name='', value=f'{member_emodji} {member.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
                embed.set_footer(
                    text=f'‚Ä¢{servername_to_footer} Warn | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                    icon_url=interaction.guild.icon.url)
                await interaction.response.send_message(embed=embed, ephemeral=True)
        if action == 'give':
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("SELECT warns FROM warn_list WHERE guild_id=? AND user_id=?",
                               (interaction.guild.id, member.id))
                result = cursor.fetchone()
                if result is None:
                    cursor.execute("INSERT INTO warn_list (guild_id, user_id, warns) VALUES (?, ?, ?)",
                                   (interaction.guild.id, member.id, 1))
                else:
                    current_warns = result[0]
                    cursor.execute("UPDATE warn_list SET warns=?, last_warn_time=? WHERE guild_id=? AND user_id=?",
                                   (current_warns + 1, datetime.datetime.now(), interaction.guild.id, member.id))
                database_location.commit()
                cursor.execute("SELECT warns FROM warn_list WHERE guild_id=? AND user_id=?",
                               (interaction.guild.id, member.id))
                embed_result = cursor.fetchone()
            except sqlite3.Error as e:
                logger.error(f'Something went w rong. Error: {e}')
                await interaction.response.send_message(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
            embed = nextcord.Embed(title=f'{created_since_emodji} –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', color=nextcord.Color.dark_purple())
            embed.add_field(name='', value=f'{staff_emodji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {interaction.user.mention}\n'
                                           f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                                           f'{warn_emodji} –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥—ë–Ω–Ω—ã–π: {member.mention}\n'
                                           f'{created_since_emodji} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {embed_result[0]}')
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Warn | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed)

            if embed_result[0] >= 5:
                admin_role = nextcord.utils.get(interaction.guild.roles, name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                await member.remove_roles(admin_role, reason='too many warns')
                embed_warn = nextcord.Embed(title=f'{created_since_emodji} –°–Ω—è—Ç–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                                            color=nextcord.Color.red())
                embed_warn.add_field(name=f'{member_emodji} {member.name} –í—ã —Å–Ω—è—Ç—ã —Å –ø–æ—Å—Ç–∞ –∞–¥–Ω–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
                                     value=f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n'
                                           f'{warn_emodji} –ß—Ç–æ–±—ã –æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ–±—Ä–∞—â–µ–Ω–∏—è')
                embed.set_footer(
                    text=f'‚Ä¢ {servername_to_footer} Reset | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                    icon_url=interaction.guild.icon.url)
                cursor.execute("UPDATE warn_list SET warns = 0 WHERE user_id = ?", (member.id,))
                database_location.commit()
                database_location.close()
                await interaction.channel.send(embed=embed_warn)
    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                ephemeral=True)


@client_discord.slash_command(name='kick', description='–£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É—á–∞—Å—Ç–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
async def kick(interaction: Interaction, member: nextcord.Member,
               reason: str = SlashOption(description='–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è', default="–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
        try:
            await member.kick(reason=reason)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±—ã–ª —É–¥–∞–ª—ë–Ω {interaction.user.mention} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}')
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("""
                    INSERT INTO mod_actions (action_type, guild_id, moderator_name, moderator_id, target_user_name,
                     target_user_id, reason, action_time) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, ('Kick', interaction.guild.id, interaction.user.name, interaction.user.id, member.name, member.id,
                      reason,
                      datetime.datetime.now()))
                database_location.commit()
            except sqlite3.Error as e:
                logger.error(f'Something went wrong! Error: {e}')
            finally:
                database_location.close()
            if reason in ['–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']:
                await warn(interaction, interaction.guild.id, interaction.user.id,
                           interaction.user.name, interaction.guild)
            embed = nextcord.Embed(title=f"{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–¥–∞–ª–µ–Ω–∏–∏",
                                   color=nextcord.Color.dark_purple())
            embed.add_field(name=' ', value=f'{staff_emodji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {interaction.user.mention}\n'
                                            f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                                            f'{member_emodji} –£–¥–∞–ª—ë–Ω–Ω—ã–π: {member.mention}')
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Kick | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed)
        except nextcord.Forbidden:
            logger.error('–£ –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
            await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                    ephemeral=True)
    else:
        logger.info(f'–£ {interaction.user.mention} –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                ephemeral=True)


@client_discord.slash_command(name='server-info', description='–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞')
async def serverinfo(interaction: Interaction,
                     type: str = SlashOption(description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏: –Ω–æ–≤–∞—è –∏–ª–∏ —Å—Ç–∞—Ä–∞—è',
                                             choices=['new', 'old'],
                                             default='new')):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        if type == 'new':
            guild = interaction.guild
            bots = sum(1 for member in guild.members if member.bot)
            total_members = guild.member_count
            without_bot = total_members - bots

            server_owner = guild.owner.mention
            if server_owner == None:
                server_owner = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            verification_level = guild.verification_level
            if verification_level == guild.verification_level.low:
                verification_level_show = '–ù–∏–∑–∫–∏–π'
            elif verification_level == guild.verification_level.medium:
                verification_level_show = '–°—Ä–µ–¥–Ω–∏–π'
            elif verification_level == guild.verification_level.high:
                verification_level_show = '–í—ã—Å–æ–∫–∏–π'
            else:
                verification_level_show = '–ù–µ—Ç'
            created_at = guild.created_at
            text_channels = len(guild.text_channels)
            voice_channels = len(guild.voice_channels)
            categories = len(guild.categories)

            embed = nextcord.Embed(title=guild.name, color=0x6fa8dc)
            embed.set_thumbnail(url=guild.icon.url)
            embed.add_field(name='–û—Å–Ω–æ–≤–Ω–æ–µ', value=f'{guild_owner_emodji} –í–ª–∞–¥–µ–ª–µ—Ü: {server_owner}\n'
                                              f'{verification_level_emodji} –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {verification_level_show}\n'
                                              f'{created_since_emodji} –°–æ–∑–¥–∞–Ω: <t:{int(created_at.timestamp())}:F>\n(<t:{int(created_at.timestamp())}:R>)\n'
                                              f'{slash_emodji} –í—Å–µ–≥–æ {text_channels + voice_channels + categories} –∫–∞–Ω–∞–ª–æ–≤\n'
                                              f'{text_emodji} –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: {text_channels}\n'
                                              f'{voice_emodji} –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: {voice_channels}\n'
                                              f'{categories_emodji} –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n')
            embed.add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value=f'{members_emodji} –í—Å–µ–≥–æ {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n'
                                                       f'{bot_emodji} –ë–æ—Ç–æ–≤: {bots}\n'
                                                       f'{member_emodji} –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {without_bot}\n')
            boost_level = guild.premium_tier
            embed.add_field(name='–ë—É—Å—Ç—ã', value=f'{boost_emodji} –£—Ä–æ–≤–µ–Ω—å: {boost_level} (–±—É—Å—Ç–æ–≤ - {guild.premium_subscription_count})\n')
            embed.add_field(name='–°—Å—ã–ª–∫–∏', value=f'{telegram_emodji} Telegram-–∫–∞–Ω–∞–ª: {telegram_channels_link} \n'
                                                 f'{discord_emodji} Discord-—Å–µ—Ä–≤–µ—Ä: {discord_server_link}\n')
            embed.set_footer(text=f'‚Ä¢ –ó–∞–ø—Ä–æ—Å –æ—Ç {interaction.user}\n‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.user.avatar.url)
            await interaction.response.send_message(embed=embed, ephemeral=True)
        if type == 'old':
            logger = logging.getLogger(__name__)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞')
            if nextcord.utils.get(interaction.user.roles, name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") is not None:
                guild = nextcord.utils.get(client_discord.guilds, id=1171462603260821585)
                bots = sum(1 for member in guild.members if member.bot)
                admin_role = nextcord.utils.get(guild.roles, name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                admin_count = len([member for member in interaction.guild.members if admin_role in member.roles])
                verify_role = nextcord.utils.get(guild.roles, name="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω‚úÖÔ∏è")
                verify_count = len([member for member in interaction.guild.members if verify_role in member.roles])

                embed = nextcord.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", color=0xffffff)
                embed.set_thumbnail(url=guild.icon.url)
                embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ", value=f'<t:{int(guild.created_at.timestamp())}:R>',
                                inline=False)
                embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                                value=f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(guild.members)} \n"
                                      f"–ë–æ—Ç–æ–≤: {str(bots)} \n"
                                      f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count} \n"
                                      f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏—Å—å: {verify_count}",
                                inline=False)
                embed.add_field(name="–ö–∞–Ω–∞–ª—ã",
                                value=f"–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(guild.text_channels)}\n"
                                      f"–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(guild.voice_channels)}\n"
                                      f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(guild.categories)} ",
                                inline=False)
                embed.add_field(name="–°—Å—ã–ª–∫–∏",
                                value=f"üì≤Telegram-–∫–∞–Ω–∞–ª: {telegram_channels_link} \nüëæDiscord-—Å–µ—Ä–≤–µ—Ä: {discord_server_link}")
                embed.set_footer(text=f'‚Ä¢ –ó–∞–ø—Ä–æ—Å –æ—Ç {interaction.user}\n‚Ä¢ {servername_to_footer} Info {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                                 icon_url=interaction.user.avatar.url)
                await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message(
            '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', ephemeral=True)


@client_discord.slash_command(name='clear', description='–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
async def clear(interaction: Interaction, limit: int = SlashOption(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (0 - —É–¥–∞–ª–∏—Ç—å –≤—Å—ë)')):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
        try:
            if limit == 0:
                await interaction.channel.purge(limit=None)
            else:
                await interaction.channel.purge(limit=limit)

            if interaction.response.is_done():
                await interaction.followup.send('–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã', ephemeral=True)
            else:
                await interaction.response.send_message('–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã', ephemeral=True)
        except nextcord.errors.Forbidden:
            if interaction.response.is_done():
                await interaction.followup.send('–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.', ephemeral=True)
            else:
                await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.', ephemeral=True)
        except ValueError:
            if interaction.response.is_done():
                await interaction.followup.send('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ', ephemeral=True)
            else:
                await interaction.response.send_message('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ', ephemeral=True)
    else:
        if interaction.response.is_done():
            await interaction.followup.send('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', ephemeral=True)
        else:
            await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', ephemeral=True)


@client_discord.slash_command(name='members', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def members(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
        guild = interaction.guild
        members_info = [f"{member_emodji} {member.mention}-{member.name} (ID: {member.id}) (–í—ã—Å—à–∞—è —Ä–æ–ª—å: {member.top_role})" for member
                        in guild.members]

        embed = nextcord.Embed(title=f'{created_since_emodji} –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞', description='\n'.join(members_info), color=0xffffff)
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Info {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}\n‚Ä¢ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                         icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message(f'{interaction.user.mention}. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral=True)


@client_discord.slash_command(name='mute-list', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥–ª—É—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def mute_list(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–≥–ª—É—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    if nextcord.utils.get(interaction.user.roles, name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):

        mutes = [f'{member_emodji} {member.mention} (–í—ã—Å—à–∞—è —Ä–æ–ª—å: {member.top_role})' for member in interaction.guild.members
                 if nextcord.utils.get(member.roles, name='Muted')]
        mutes_count = len(mutes)
        embed = nextcord.Embed(title=f'{created_since_emodji} –°–ø–∏—Å–æ–∫ –∑–∞–≥–ª—É—à—ë–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', description='\n'.join(mutes),
                               color=nextcord.Color.dark_purple())
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}\n–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {mutes_count} –∑–∞–≥–ª—É—à—ë–Ω–Ω—ã—Ö.',
                         icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        interaction.response.send_message(f'{interaction.user.mention}. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral=True)


@client_discord.slash_command(name='ban-list', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def ban_list(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        ban_list = []
        async for ban_entry in interaction.guild.bans():
            ban_list.append(f'{member_emodji} {ban_entry.user} (–ü—Ä–∏—á–∏–Ω–∞: {ban_entry.reason})')
        ban_count = len(ban_list)
        embed = nextcord.Embed(title=f'{created_since_emodji} –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', description='\n'.join(ban_list),
                               color=0xffffff)
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}\n'
                 f'‚Ä¢ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {ban_count} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.',
            icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.", ephemeral=True)


@client_discord.slash_command(name='help', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞')
async def help(interaction: Interaction,
             rank: str = SlashOption(
                  name="rank",
                  description='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥: mod –∏–ª–∏ default',
                  choices=['default', 'mod'],
                  default='default'
             )
             ):
    logger = logging.getLogger(__name__)
    if rank == 'default':
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥. –†–∞–Ω–≥: –£—á–∞—Å—Ç–Ω–∏–∫')
        embed = nextcord.Embed(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–∞", color=0x999999)
        embed.add_field(
            name=f'–û—Å–Ω–æ–≤–Ω—ã–µ',
            value=f'**/help**\n'
                  f'**/avatar**\n'
                  f'**/weather**\n'
                  f'**/info**\n'
                  f'**/links**\n'
                  f'**/author-links**\n'
                  f'**/invites**\n',
            inline=True
        )
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Help | {datetime.datetime.now().replace(microsecond=0)}',
                         icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)
    elif rank == 'mod':
        if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥. –†–∞–Ω–≥: –ú–æ–¥–µ—Ä–∞—Ü–∏—è')
            embed = nextcord.Embed(title=f"{created_since_emodji} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–∞. –†–∞–Ω–≥ –º–æ–¥–µ—Ä–∞—Ü–∏—è {created_since_emodji}",
                                   description=f'–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã (/), –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
                                   color=0x999999)
            embed.add_field(
                name=f'–û—Å–Ω–æ–≤–Ω—ã–µ',
                value=f'**/help**\n'
                      f'**/avatar**\n'
                      f'**/weather**\n'
                      f'**/info**\n'
                      f'**/links**\n'
                      f'**/author-links**\n'
                      f'**/invites**\n',
                inline=True
            )
            embed.add_field(
                name=f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è\n',
                value=f'**/kick**\n'
                      f'**/ban**\n'
                      f'**/unban**\n'
                      f'**/mute**\n'
                      f'**/unmute**\n'
                      f'**/warn**\n'
                      f'**/mute-list**\n'
                      f'**/ban-list**',
                inline=True
            )
            embed.add_field(
                name=f'–î—Ä—É–≥–æ–µ',
                value=f'**/clear**\n'
                      f'**/members**\n'
                      f'**/server-info**\n'
                      f'**/say**\n'
                      f'**/log**\n'
                      f'**/database**\n'
                      f'**/channel-info**\n'
                      f'**/bot-info**\n'
                      f'**/verify-menu**\n'
                      f'**/ticket-menu**\n'
                      f'**/getrole-menu**\n',
                inline=True
            )
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Help | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥', ephemeral=True)


@client_discord.slash_command(name='mute', description='–ó–∞–≥–ª—É—à–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def mute(interaction: Interaction, member: nextcord.Member, reason: str = SlashOption(description='–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è', default="–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≥–ª—É—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') is not None:
        try:
            mute_role = nextcord.utils.get(interaction.guild.roles, name="Muted")
            if not mute_role:
                mute_role = await interaction.guild.create_role(name="Muted",permissions=discord.Permissions(send_messages=False,speak=False))
                await mute_role.edit(position=1)
            await member.add_roles(mute_role, reason=reason)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±—ã–ª –∑–∞–≥–ª—É—à—ë–Ω {interaction.user.mention} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}')
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("""
                    INSERT INTO mod_actions (action_type, guild_id, moderator_name, moderator_id, target_user_name, target_user_id, reason, action_time) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, ('Mute', interaction.guild.id, interaction.user.name, interaction.user.id, member.name, member.id, reason,
                      datetime.datetime.now()))
                database_location.commit()
            except sqlite3.Error as e:
                logger.error(f'Something went wrong! Error: {e}')
            finally:
                database_location.close()
            if reason in ['–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']:
                await warn(interaction, interaction.guild.id, interaction.user.id,
                           interaction.user.name, interaction.guild)
            embed = nextcord.Embed(title=f"{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥–ª—É—à–µ–Ω–∏–∏", color=nextcord.Color.dark_purple())
            embed.add_field(name=' ', value=f'{staff_emodji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {interaction.user.mention}\n'
                                            f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                                            f'{member_emodji} –ó–∞–≥–ª—É—à—ë–Ω–Ω—ã–π: {member.mention}')
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Moderation | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed)
        except nextcord.Forbidden:
            logger.error('–£ –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥–ª—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
            await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                    ephemeral=True)
    else:
        logger.info(f'–£ {interaction.user.mention} –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                ephemeral=True)


@client_discord.slash_command(name='unmute', description='–°–Ω–∏–º–∞–µ—Ç –∑–∞–≥–ª—É—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
async def unmute(interaction: Interaction, member: nextcord.Member, reason: str = SlashOption(description='–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è', default="–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–Ω—è—Ç–∏—è –∑–∞–≥–ª—É—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        try:
            mute_role = nextcord.utils.get(interaction.guild.roles, name="Muted")
            if not mute_role:
                mute_role = await interaction.guild.create_role(name="Muted", permissions=discord.Permissions(send_messages=False, speak=False))
                await mute_role.edit(position=1)
            await member.remove_roles(mute_role, reason=reason)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±—ã–ª —Ä–∞–∑–≥–ª—É—à—ë–Ω {interaction.user.mention} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}')
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("""
                    INSERT INTO mod_actions (action_type, guild_id, moderator_name, moderator_id, target_user_name, target_user_id, reason, action_time) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, ('Unmute', interaction.guild.id, interaction.user.name, interaction.user.id, member.name, member.id, reason,
                      datetime.datetime.now()))
                database_location.commit()
            except sqlite3.Error as e:
                logger.error(f'Something went wrong! Error: {e}')
            finally:
                database_location.close()
            if reason in ['–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']:
                await warn(interaction, interaction.guild.id, interaction.user.id,
                           interaction.user.name, interaction.guild)
            embed = nextcord.Embed(title=f'{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≥–ª—É—à–µ–Ω–∏–∏', color=nextcord.Color.dark_purple())
            embed.add_field(name=' ', value=f'{staff_emodji} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {interaction.user.mention}\n'
                                            f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                                            f'{member_emodji} –†–∞–∑–≥–ª—É—à—ë–Ω–Ω—ã–π: {member.mention}')
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Moderation | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed)
        except nextcord.Forbidden:
            logger.error('–£ –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥–ª—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
            await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                    ephemeral=True)
    else:
        logger.info(f'–£ {interaction.user.mention} –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                                ephemeral=True)


@client_discord.slash_command(name='unban', description='–°–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def unban(interaction: Interaction, user_id: str, reason: str = SlashOption(description='–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', default='–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞')

    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        try:
            user = await client_discord.fetch_user(int(user_id))
            await interaction.guild.unban(user, reason=reason)
            embed = nextcord.Embed(title=f'{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ', color=nextcord.Color.dark_purple())
            embed.add_field(name=' ', value=f'{staff_emodji}–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {interaction.user.mention}\n'
                                            f'{reason_emodji} –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
                                            f'{member_emodji} –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {user.mention}\n')
            embed.set_footer(
                text=f'‚Ä¢ {servername_to_footer} Moderation | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                icon_url=interaction.guild.icon.url)

            if reason == '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞':
                await warn(interaction, interaction.guild.id, interaction.user.id,
                           interaction.user.name, interaction.guild)

            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                cursor.execute("""
                    INSERT INTO mod_actions (action_type, guild_id, moderator_name, moderator_id, target_user_name, target_user_id, reason, action_time)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, ('Unban', interaction.guild.id, interaction.user.name, interaction.user.id,
                      user.name, user.id, reason, datetime.datetime.now()))
                database_location.commit()
            except Exception as e:
                logger.error(f'Something went wrong! Error: {e}')
            finally:
                database_location.close()

            await interaction.response.send_message(embed=embed)
        except nextcord.errors.Forbidden:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: discord.errors.Forbidden")
            await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', ephemeral=True)
        except nextcord.errors.NotFound:
            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: discord.errors.NotFound')
            await interaction.response.send_message('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', ephemeral=True)
    else:
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã', ephemeral=True)


@client_discord.slash_command(name='info', description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ')
async def info(interaction: Interaction, member: nextcord.Member,
               hidden: str = SlashOption(
                   name="hidden",
                   description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç –æ–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                   choices=['hidden', 'shown'],
                   default='hidden'
               )):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ')
    excepted_roles = ["@everyone", "Member"]
    role_count = len([role.name for role in member.roles if role.name not in excepted_roles])
    roles = member.roles
    role_names = [f'<@&{role.id}>' for role in roles if role.name not in excepted_roles]
    role_list = ' '.join(role_names)
    discriminator = member.discriminator
    if discriminator == 0:
        discriminator = None
    embed = nextcord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {member.name}", color=0xffffff)
    embed.set_thumbnail(url=member.avatar.url)
    embed.add_field(name="–ù–∏–∫–Ω–µ–π–º:", value=member.name, inline=True)
    embed.add_field(name="–ü—Ä–æ—Ñ–∏–ª—å:", value=member.mention, inline=True)
    embed.add_field(name="–ü–æ–ª–Ω–æ–µ –∏–º—è:", value=f'{member.name}#{discriminator}', inline=True)
    embed.add_field(name="ID:", value=member.id, inline=True)
    embed.add_field(name="–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è:", value=f'<t:{int(member.joined_at.timestamp())}:R>', inline=True)
    embed.add_field(name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ', value=f'<t:{int(member.created_at.timestamp())}:R>')
    embed.add_field(name="–†–æ–ª—å:", value=f'<@&{member.top_role.id}>', inline=True)
    embed.add_field(name="–†–æ–ª–∏:", value=role_list)
    embed.add_field(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π:', value=role_count)
    embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                     icon_url=interaction.guild.icon.url)
    if hidden == 'hidden':
        await interaction.response.send_message(embed=embed, ephemeral=True)
    elif hidden == 'shown':
        await interaction.response.send_message(embed=embed, ephemeral=False)


@client_discord.slash_command(name='say', description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞')
async def say(interaction: Interaction, message: str = SlashOption(description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∑–¥–µ—Å—å')):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        await interaction.channel.send(message)
        await interaction.response.send_message('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ', ephemeral=True)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –æ—Ç–ø—Ä–∞–≤–∏–ª ({message}) –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞')
    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã', ephemeral=True)


@client_discord.slash_command(name='avatar', description='–û—Ç–ø—Ä–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def avatar(interaction: Interaction, member: nextcord.Member):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    embed = nextcord.Embed(title=f'–ê–≤–∞—Ç–∞—Ä {member.name}', color=0xffffff)
    embed.set_image(url=member.avatar.url)
    embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                     icon_url=interaction.guild.icon.url)
    await interaction.response.send_message(embed=embed)


@client_discord.slash_command(name='log', description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–≥–∞–º–∏')
async def log(interaction: Interaction,
              content: str = SlashOption(
                  name="action",
                  description='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å –ª–æ–≥–∞–º–∏',
                  choices=['download',  'save', 'archive', 'delete']
              ),
              target: str = SlashOption(
                  name="target",
                  description='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞: current, archive –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞',
                  default='current'
              )
):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        if content.lower() in ['delete']:
            if target in ['archive']:
                if interaction.user.name == 'ivan_kem_twink':
                    folder_path = 'archive_logs'
                    if os.path.exists(folder_path):
                        for filename in os.listdir(folder_path):
                            file_path = os.path.join(folder_path, filename)
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                        await interaction.response.send_message('–ü–∞–ø–∫–∞ —Å –∞—Ä—Ö–∏–≤–æ–º –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç—á–∏—â–µ–Ω–∞', ephemeral=True)
                        win_notification('User clear archive logs', f'{interaction.user.name} cleared archive log files\nTime: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}')
                    else:
                        print(f"–ü–∞–ø–∫–∞ '{folder_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                else:
                    await interaction.response.send_message('–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', ephemeral=True)
            if target in ['current']:
                if interaction.user.name == 'ivan_kem_twink':
                    logging.shutdown()
                    open('log.log', 'w').close()
                    logging.basicConfig(filename='log.log', level=logging.INFO)
                    await interaction.response.send_message(f'–î–µ–π—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ —É–¥–∞–ª—ë–Ω', ephemeral=True)
                    win_notification('User clear current log', f'{interaction.user.name} cleared main logging file\nTime: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}')
        if content.lower() in ['download', 'Download', 'dowload', 'Dowload']:
            if content == 'download':
                if target == 'current':
                    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–∑—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤!')
                    await interaction.response.send_message(file=nextcord.File(f'log.log'),
                                                            ephemeral=True)
                    win_notification('User downloaded log',
                                     f'Current log file downloaded by {interaction.user.name}')
                elif target in ['Archive', 'archive']:
                    archive_logs_dir = os.path.join(os.getcwd(), 'archive_logs')
                    files = os.listdir(archive_logs_dir)
                    await interaction.response.defer(ephemeral=True)
                    for file in files:
                        file_path = os.path.join(archive_logs_dir, file)
                        await interaction.followup.send(file=nextcord.File(file_path), ephemeral=True)
                    win_notification('User downloaded log',
                                     f'{interaction.user.name} downloaded archive log files\nTime: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}')
                else:
                    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–∑—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤!')
                    try:
                        await interaction.response.send_message(file=nextcord.File(f'archive_logs\\{target}'),
                                                                ephemeral=True)
                    except FileNotFoundError:
                        await interaction.response.send_message(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral=True)
                    win_notification('User downloaded log', f'{target} downloaded by {interaction.user.name}')

            else:
                await interaction.response.send_message('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', ephemeral=True)
        elif content.lower() in ['save', 'Save']:
            log_channel = nextcord.utils.get(interaction.guild.channels, name='logs')
            if log_channel:
                file = 'log.log'
                with open(file, 'r') as file1:
                    first_line_temp = file1.readline()
                    first_line = first_line_temp.strip()
                log_datetime_str = first_line.split(' ', 1)[0]
                log_datetime = datetime.datetime.strptime(log_datetime_str, "%Y-%m-%d")

                last_change_time = os.path.getmtime('log.log')
                last_change_timestamp = int(last_change_time)

                try:
                    await log_channel.send(file=nextcord.File('log.log'))
                    await log_channel.send(
                        f'–≠—Ç–æ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∑–∞ –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞.\n'
                        f'–í—ã–∑–≤–∞–ª: {interaction.user.mention}\n'
                        f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <t:{int(log_datetime.timestamp())}:R>\n'
                        f'–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: <t:{last_change_timestamp}:R>'
                    )
                except nextcord.errors.Forbidden:
                    await interaction.response.send_message('–£ –º–µ–Ω—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏!', ephemeral=True)
                if not os.path.exists('archive_logs'):
                    os.makedirs('archive_logs')

                logging.shutdown()
                if not os.path.exists('archive_logs'):
                    os.makedirs('archive_logs')

                new_log_name = f"log_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log"
                new_log_path = os.path.join('archive_logs', new_log_name)

                shutil.move('log.log', new_log_path)

                open('log.log', 'w').close()

                logging.basicConfig(filename='log.log', level=logging.INFO)
                await interaction.response.send_message(
                        f'–§–∞–π–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –∫–∞–Ω–∞–ª logs –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω', ephemeral=True)
                win_notification('User rewrited (save) log',
                                 f'{interaction.user.name} rewrited current log file\nTime: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}')
            else:
                interaction.response.send_message('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤!', ephemeral=True)
        elif content.lower() in ['archive', 'Archive']:
            archive_logs_dir = os.path.join(os.getcwd(), 'archive_logs')

            if not os.path.exists(archive_logs_dir) or not os.path.isdir(archive_logs_dir):
                await interaction.response.send_message("–ü–∞–ø–∫–∞ archive_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
                return

            files = os.listdir(archive_logs_dir)

            embed = nextcord.Embed(title="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ –ª–æ–≥–æ–≤", color=0xffffff)

            for file in files:
                file_path = os.path.join(archive_logs_dir, file)
                file_size = os.path.getsize(file_path)
                embed.add_field(name=file, value=f"–†–∞–∑–º–µ—Ä: {(file_size/1024.0):.2f}–∫–±", inline=False)
                embed.set_footer(
                    text=f'‚Ä¢ {servername_to_footer} Log | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                    icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã',
                                                ephemeral=True)


@client_discord.slash_command(name='weather', description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ')
async def weather(interaction: Interaction, city: str = SlashOption(description='–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥')):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.mention} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã')

    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_Weather}&units=metric'
    time = datetime.datetime.now().replace(microsecond=0)
    response = requests.get(url)
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API OpenWeatherMap: {url}")

    if response.status_code == 200:
        weather_data = response.json()
        try:
            filtered_data = {
                "X": weather_data['coord']['lon'],
                "Y": weather_data['coord']['lat'],
                "Temp_min": weather_data['main']['temp_min'],
                "Temp_max": weather_data['main']['temp_max'],
                "Temp": weather_data['main']['temp'],
                "Feels_like": weather_data['main']['feels_like'],
                "Country": weather_data['sys']['country'],
                "Wind_speed": weather_data['wind']['speed'],
                "Humidity": weather_data['main']['humidity'],
                "City_id": weather_data['id']
            }
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        except KeyError:
            logger.error(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
            embed = nextcord.Embed(title=f"–û—à–∏–±–∫–∞", color=0xff0000)
            embed.add_field(name=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", value='–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã.')
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            url_png = f"https://tile.openweathermap.org/map/temp_new/0/0/0.png?appid={API_Weather}"
            embed = nextcord.Embed(title=f"–ü–æ–≥–æ–¥–∞ –≤ {city}", color=0x376abd)
            embed.set_thumbnail(url=url_png)
            embed.add_field(
                name=f"–ì–æ—Ä–æ–¥: {city}, –°—Ç—Ä–∞–Ω–∞: {filtered_data['Country']}",
                value=f"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {filtered_data['Temp']}¬∞C\n"
                      f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {filtered_data['Temp_min']}¬∞C\n"
                      f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {filtered_data['Temp_max']}¬∞C\n"
                      f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º: {filtered_data['Feels_like']}¬∞C\n"
                      f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {filtered_data['Wind_speed']} –º/—Å\n"
                      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {filtered_data['Humidity']}%\n"
                      f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {time}\n"
                      f"–ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.mention}\n"
                      f"–ò—Å—Ç–æ—á–Ω–∏–∫: https://openweathermap.org/city/{filtered_data['City_id']}"
            )
            embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Weather | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                             icon_url=interaction.guild.icon.url)
            logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω.")
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except requests.exceptions.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP: {e}")
            embed = nextcord.Embed(title=f"–û—à–∏–±–∫–∞", color=0xff0000)
            embed.add_field(name=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", value='–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            embed.set_footer(
                text=f'‚Ä¢ {servername_to_footer} Weather | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            embed = nextcord.Embed(title=f"–û—à–∏–±–∫–∞", color=0xff0000)
            embed.add_field(name=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", value='–û—à–∏–±–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            embed.set_footer(
                text=f'‚Ä¢ {servername_to_footer} Weather | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        logger.error(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        embed = nextcord.Embed(title=f"–û—à–∏–±–∫–∞", color=0xff0000)
        embed.add_field(name=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", value='')
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Weather | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                         icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='database', description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞')
async def database(interaction: Interaction,
                   content: str = SlashOption(
                       name="action",
                       description='–î–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
                       choices=['start', 'download', 'save', 'archive']
                   ),
                   target: str = SlashOption(
                       name='target',
                       description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ñ–∞–π–ª —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å',
                       default='current'
                   )):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /database.')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        if content == 'start':
            try:
                database_location = sqlite3.connect(f'{servername_database}_discord.db')
                cursor = database_location.cursor()
                users_data = [(member.id, member.name, member.mention, member.joined_at) for member in
                              interaction.guild.members]
                cursor.executemany(
                    "INSERT OR IGNORE INTO users_list (user_id, user_name, user_mention, user_joined_date) VALUES (?, ?, ?, ?)",
                    users_data)
                cursor.execute("""
                            CREATE TABLE IF NOT EXISTS tickets_reputation (
                                guild_id INTEGER NOT NULL,
                                user_id INTEGER NOT NULL,
                                user_name TEXT NOT NULL
                            )
                        """)
                admin_list = [(interaction.guild.id, member.id, member.name) for member in interaction.guild.members
                              if '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' in member.roles]
                cursor.executemany("INSERT OR IGNORE INTO tickets_reputation (guild_id, user_id, user_name) VALUES (?, ?, ?)", admin_list)

                database_location.commit()

                await interaction.response.send_message(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {servername_database}_discord.db –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.', ephemeral=True)

            except sqlite3.Error as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')
                await interaction.response.send_message(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')

            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞: {e}')
                await interaction.response.send_message(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        if content == 'download':
            if target == 'current':
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–∑—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')
                await interaction.response.send_message(file=nextcord.File(f'{servername_database}_discord.db'),
                                                        ephemeral=True)
                win_notification('Request database',
                                 f'{servername_database}_discord.db downloaded by {interaction.user.name}')
            else:
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–∑—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')
                try:
                    await interaction.response.send_message(file=nextcord.File(f'archive_database\\{target}'), ephemeral=True)
                except FileNotFoundError:
                    await interaction.response.send_message(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral=True)
                win_notification('Request database', f'{target} downloaded by {interaction.user.name}')
        if content == 'save':
            logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
            database_location = sqlite3.connect(f'{servername_database}_discord.db')
            database_location.commit()
            database_location.close()
            logging.info(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {servername_database}_discord.db —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
            win_notification('Database stopped', f'{servername_database}_discord.db saved!')
            await interaction.response.send_message(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {servername_database}_discord.db —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', ephemeral=True)
            try:
                shutil.copy2(f'{servername_database}_discord.db',
                             f'archive_database/{servername_database}_discord_{datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.db')
            except FileNotFoundError:
                logger.error(
                    f'–§–∞–π–ª {servername_database}_discord.db –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–∂–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤.')
            except OSError as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}')
            database_channel = nextcord.utils.get(interaction.guild.channels, name='database')
            if database_channel:
                last_change_time = os.path.getmtime(f'{servername_database}_discord.db')
                last_change_timestamp = int(last_change_time)
                try:
                    await database_channel.send(file=nextcord.File(f'{servername_database}_discord.db'))
                    await database_channel.send(
                        f'–≠—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n'
                        f'–í—ã–∑–≤–∞–ª: {interaction.user.mention}\n'
                        f'–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: <t:{last_change_timestamp}:R>'
                    )
                except FileNotFoundError:
                    await interaction.response.send_message('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral=True)
        if content.lower() in ['archive', 'Archive']:
            archive_database_dir = os.path.join(os.getcwd(), 'archive_database')

            if not os.path.exists(archive_database_dir) or not os.path.isdir(archive_database_dir):
                await interaction.response.send_message("–ü–∞–ø–∫–∞ archive_database –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
                return

            files = os.listdir(archive_database_dir)

            embed = nextcord.Embed(title="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö", color=0xffffff)

            for file in files:
                file_path = os.path.join(archive_database_dir, file)
                file_size = os.path.getsize(file_path)
                embed.add_field(name=file, value=f"–†–∞–∑–º–µ—Ä: {(file_size/1024.0):.2f}–∫–±\n", inline=False)
                embed.set_footer(
                    text=f'‚Ä¢ {servername_to_footer} Database | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                    icon_url=interaction.guild.icon.url)
            await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')


@client_discord.slash_command(name='ticket-menu', description='–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏–π')
async def menu(interaction: Interaction):
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        view = TicketView()
        embed = nextcord.Embed(title="–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", color=0xffffff)
        embed.add_field(name=f'{created_since_emodji} ‚Ä¢ –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–∏–ª–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:',
                        value=f'{reason_emodji} ‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ—Å—å–±—É –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ,'
                              f' —á—Ç–æ–±—ã –≤–∞–º —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.')
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Tickets | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
            icon_url=interaction.guild.icon.url)
        await interaction.channel.send(embed=embed, view=view)
        await interaction.response.send_message(f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', ephemeral=True)
    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral=True)


@client_discord.slash_command(name='verify-menu', description='–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
async def menu(interaction: Interaction):
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        view = VerifyView()
        embed = nextcord.Embed(title='–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏', color=0xffffff)
        embed.add_field(name=f'{created_since_emodji} ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                        value=f'{reason_emodji} ‚Ä¢ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å <@&1246041998054522880>\n'
                              f'{warn_emodji} ‚Ä¢ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±—Ä–∞—Ç—å "Verify"')
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Verify | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
            icon_url=interaction.guild.icon.url)
        await interaction.channel.send(embed=embed, view=view)
        await interaction.response.send_message(f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', ephemeral=True)
    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral=True)


@client_discord.slash_command(name='getrole-menu', description='–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã')
async def menu(interaction: Interaction):
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        view = GetroleView()
        embed = nextcord.Embed(title='–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã', color=0xffffff)
        embed.add_field(name=f'{created_since_emodji} ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                        value=f'{reason_emodji} ‚Ä¢ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É\n'
                              f'{warn_emodji} ‚Ä¢ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±—Ä–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É')
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Verify | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
            icon_url=interaction.guild.icon.url)
        await interaction.channel.send(embed=embed, view=view)
        await interaction.response.send_message(f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', ephemeral=True)
    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral=True)


@client_discord.slash_command(name='links', description='–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π')
async def links(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'{created_since_emodji} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫')
    embed = nextcord.Embed(title=f'{created_since_emodji} –°—Å—ã–ª–∫–∏', color=0x8b00ff)
    embed.add_field(name=f'{created_since_emodji} –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:',
                    value=f'{link_emodji} –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: {link["main"]}\n'
                          f'{link_emodji} –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {link["shedules"]}\n'
                          f'{link_emodji} –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞:  {link["login"]}')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Links | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url=interaction.guild.icon.url)
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='author-links', description='–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞')
async def author_links(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞')
    embed = nextcord.Embed(title=f'{created_since_emodji} –°—Å—ã–ª–∫–∏', color=0xffffff)
    embed.add_field(name=f'{created_since_emodji} –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∞(—Å–æ–∑–¥–∞—Ç–µ–ª—è) –±–æ—Ç–∞',
                    value=f'{link_emodji} –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è: {author_link["main"]}\n'
                          f'{link_emodji} –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: {author_link["bot-repositori"]}\n'
                          f'{link_emodji} –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {author_link["other-repositories"]}')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Links | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url=interaction.guild.icon.url)
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='invites', description='–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
async def invite(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    invites = await interaction.guild.invites()
    embed = nextcord.Embed(title=f'{created_since_emodji} –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', color=0xffffff)
    if not invites:
        embed.add_field(name=f'{created_since_emodji} –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:',
                        value=f'{link_emodji} –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!')
    else:
        for invite in invites:
            embed.add_field(name=f'{created_since_emodji} –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç {invite.inviter}',
                            value=f'{link_emodji} –°—Å—ã–ª–∫–∞: {invite.url}\n'
                                  f'{members_emodji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ {invite.uses} —Ä–∞–∑\n'
                                  f'{warn_emodji} –°–æ–∑–¥–∞–Ω–æ: {invite.created_at.strftime("%Y-%m-%d %H:%M")}\n'
                                  f'{warn_emodji} –£–¥–∞–ª–∏—Ç—Å—è: {invite.expires_at.strftime("%Y-%m-%d %H:%M")}')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Invites | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url=interaction.guild.icon.url)
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='bot-info', description='–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ')
async def info(interaction: Interaction):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ ')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        member = interaction.guild.me
        excepted_roles = ["@everyone", "Member"]
        role_count = len([f'<@&{role.id}>' for role in member.roles if role.name not in excepted_roles])
        roles = member.roles
        role_names = [role.name for role in roles if role.name not in excepted_roles]
        role_list = ' '.join(role_names)
        discriminator = member.discriminator
        if discriminator == 0:
            discriminator = None
        embed = nextcord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {member.name}", color=0xffffff)
        embed.set_thumbnail(url=member.avatar.url)
        embed.add_field(name="–ù–∏–∫–Ω–µ–π–º:", value=member.name, inline=True)
        embed.add_field(name="–ü—Ä–æ—Ñ–∏–ª—å:", value=member.mention, inline=True)
        embed.add_field(name="–ü–æ–ª–Ω–æ–µ –∏–º—è:", value=f'{member.name}#{discriminator}', inline=True)
        embed.add_field(name="ID:", value=member.id, inline=True)
        embed.add_field(name="–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è:", value=f'<t:{int(member.joined_at.timestamp())}:R>', inline=True)
        embed.add_field(name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ', value=f'<t:{int(member.created_at.timestamp())}:R>')
        embed.add_field(name="–†–æ–ª—å:", value=f'<@&{member.top_role.id}>', inline=True)
        embed.add_field(name="–†–æ–ª–∏:", value=role_list)
        embed.add_field(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π:', value=role_count)
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                         icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='channel-info', description='–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ')
async def channel_info(interaction: Interaction,
                       channel: nextcord.abc.GuildChannel = SlashOption(
                           description='–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ',
                           channel_types=[ChannelType.text, ChannelType.voice, ChannelType.category, ChannelType.forum, ChannelType.stage_voice]
                       )):
    logger = logging.getLogger(__name__)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {channel} –∫–∞–Ω–∞–ª–µ')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        embed = nextcord.Embed(title=f'{created_since_emodji} –ö–∞–Ω–∞–ª {channel.name}', color=0xffffff)
        embed.add_field(name='Channel ID:', value=channel.id, inline=True)
        embed.add_field(name='Channel Name:', value=channel.name, inline=True)
        embed.add_field(name='Channel Type:', value=channel.type, inline=True)
        if isinstance(channel, nextcord.TextChannel):
            embed.add_field(name='Topic:', value=channel.topic or 'No topic found', inline=True)
            embed.add_field(name='NSFW:', value=channel.is_nsfw(), inline=True)
        if isinstance(channel, nextcord.VoiceChannel):
            embed.add_field(name='Bitrate:', value=channel.bitrate, inline=True)
            embed.add_field(name='User Limit:', value=channel.user_limit, inline=True)
            embed.add_field(name='Quality:', value=channel.video_quality_mode, inline=True)
        if isinstance(channel, nextcord.ForumChannel):
            embed.add_field(name='Tags:', value='\n'.join([f'{tags.name} ({tags.id})' for tags in channel.available_tags]), inline=True)
            embed.add_field(name='NSFW:', value=channel.is_nsfw(), inline=True)
        if isinstance(channel, nextcord.CategoryChannel):
            embed.add_field(name='Channels:', value='\n'.join([f'{channels.name} ({channels.type})' for channels in channel.channels]), inline=True)
            embed.add_field(name='Position:', value=channel.position, inline=True)
        if isinstance(channel, nextcord.StageChannel):
            embed.add_field(name='User Limit:', value=channel.user_limit, inline=True)
            embed.add_field(name='Bitrate:', value=channel.bitrate, inline=True)
        embed.add_field(name='Created At', value=channel.created_at.strftime("%m-%d %H:%M"), inline=True)
        embed.set_footer(text=f'‚Ä¢ {servername_to_footer} Info | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
                         icon_url=interaction.guild.icon.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral=True)


@client_discord.slash_command(name='giveaway')
async def giveaway(interaction: Interaction,
                   action: str = SlashOption(
                       description='–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                       choices=['create', 'delete', 'list']
                   ),
                   name: str = SlashOption(
                       description='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞',
                       default=None
                   ),
                   text: str = SlashOption(
                       description='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª —É—á–∞—Å—Ç–Ω–∏—è',
                       default=None
                   ),
                   prize: str = SlashOption(
                       description='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞',
                       default=None
                   ),
                   expires_at: int = SlashOption(
                       description='–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –æ–∫–æ–Ω—á–µ–Ω',
                       default=None
                   )):
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        if action == 'create':
            if not any(param is None for param in [name, text, prize, expires_at]):
                time_delta = datetime.timedelta(days=expires_at)
                new_giveaway = {
                    'name': name,
                    'text': text,
                    'prize': prize,
                    'created_at': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'expires_at': (datetime.datetime.now() + time_delta).strftime('%Y-%m-%d %H:%M:%S')
                }
                json_file = 'jsons/giveaway.json'
                data = read_json(json_file)
                if not isinstance(data, list):
                    data = []
                data.append(new_giveaway)
                giveaway_add(json_file, data)

                embed = nextcord.Embed(title='–†–æ–∑—ã–≥—Ä—ã—à', color=0xffffff)
                embed.add_field(name='–ù–∞–∑–≤–∞–Ω–∏–µ:', value=name)
                embed.add_field(name='–£—Å–ª–æ–≤–∏—è:', value=text + '\n–í—Å–µ–º —É–¥–∞—á–∏!')
                embed.add_field(name='–ü—Ä–∏–∑:', value=prize)
                embed.add_field(name='–û–∫–æ–Ω—á–∞–Ω–∏–µ:',
                                value=f'<t:{int((datetime.datetime.now() + time_delta).timestamp())}:F>')

                message = await interaction.channel.send(embed=embed)

                await message.add_reaction('üéâ')

                giveaway_data = {
                    'message_id': message.id,
                    'channel_id': interaction.channel.id,
                    'name': name
                }
                giveaways = read_json('jsons/giveaways.json')
                giveaways.append(giveaway_data)
                giveaway_add('jsons/giveaways.json', giveaways)
            else:
                await interaction.response.send_message(f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!', ephemeral=True)

        elif action == 'delete':
            json_file = 'jsons\\giveaway.json'
            data = read_json(json_file)
            data = [item for item in data if item.get('name') != name]
            giveaway_add(json_file, data)
            await interaction.response.send_message(f'–†–æ–∑—ã–≥—Ä—ã—à {name} —É–¥–∞–ª—ë–Ω', ephemeral=True)
        elif action == 'list':
            json_file = 'jsons\\giveaway.json'
            json_data = read_json(json_file)
            embed = nextcord.Embed(title='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', color=0xffffff)
            count = 0
            for data in json_data:
                count += 1
                embed.add_field(name=f'–ù–æ–º–µ—Ä:',
                                value=count)
                embed.add_field(name='–ù–∞–∑–≤–∞–Ω–∏–µ:',
                                value=data.get('name', 'Not found'))
                embed.add_field(name='–£—Å–ª–æ–≤–∏—è (—Ç–µ–∫—Å—Ç)',
                                value=data.get('text', 'Not found'))
                embed.add_field(name='–ù–∞–≥—Ä–∞–¥–∞:',
                                value=data.get('prize', 'Not found'))
                embed.add_field(name='–°–æ–∑–¥–∞–Ω–æ:',
                                value=data.get('created_at', 'Not found'))
                embed.add_field(name='–û–∫–æ–Ω—á–∏—Ç—Å—è:',
                                value=data.get('expires_at', 'Not found'))
            await interaction.response.send_message(embed=embed, ephemeral=True)

    else:
        await interaction.response.send_message(f'–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã', ephemeral=True)


@client_discord.slash_command(name='crypto-difference', description='–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ')
async def crypto_difference(interaction: Interaction,
                 crypto_currency: str = SlashOption(
                     name='crypto',
                     description='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: USDT, BTC, –∏–ª–∏ ETH',
                     choices=['BTC', 'ETH', 'DOGE', 'USDT', 'BUSD', 'SHIB', 'ELON', 'AKITA']
                 ),
                 convert_currency: str = SlashOption(
                     name='convert',
                     description='–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –§–æ—Ä–º–∞—Ç: UST, BTC, RUB',
                     choices=['BTC', 'ETH', 'DOGE', 'USDT', 'RUB', 'USD', 'BUSD', 'SHIB', 'ELON', 'AKITA']
                 )):
    if crypto_currency == 'USDT':
        crypto_currency_emoji = USDT_emodji
    elif crypto_currency == 'BTC':
        crypto_currency_emoji = BTC_emodji
    elif crypto_currency == 'DOGE':
        crypto_currency_emoji = DOGE_emodji
    elif crypto_currency == 'ETH':
        crypto_currency_emoji = ETH_emodji
    elif crypto_currency == 'BUSD':
        crypto_currency_emoji = BUSD_emodji
    elif crypto_currency == 'SHIB':
        crypto_currency_emoji = SHIB_emodji
    elif crypto_currency == 'ELON':
        crypto_currency_emoji = ELON_emodji
    elif crypto_currency == 'AKITA':
        crypto_currency_emoji = AKITA_emodji
    if convert_currency == 'USD':
        convert_currency_emoji = USD_emodji
    elif convert_currency == 'USDT':
        convert_currency_emoji = USDT_emodji
    elif convert_currency == 'BTC':
        convert_currency_emoji = BTC_emodji
    elif convert_currency == 'ETH':
        convert_currency_emoji = ETH_emodji
    elif convert_currency == 'DOGE':
        convert_currency_emoji = DOGE_emodji
    elif convert_currency == 'RUB':
        convert_currency_emoji = RUB_emodji
    elif convert_currency == 'BUSD':
        convert_currency_emoji = BUSD_emodji
    elif convert_currency == 'SHIB':
        convert_currency_emoji = SHIB_emodji
    elif convert_currency == 'ELON':
        convert_currency_emoji = ELON_emodji
    elif convert_currency == 'AKITA':
        convert_currency_emoji = AKITA_emodji
    url = f"https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    parameters = {
        'symbol': crypto_currency,
        'convert': convert_currency
    }
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': API_Crypto,
    }
    response = requests.get(url, headers=headers, params=parameters)
    data = response.json()
    price_difference = data['data'][crypto_currency]['quote'][convert_currency]['price']
    change_24h = data['data'][crypto_currency]['quote'][convert_currency]['percent_change_24h']
    embed = nextcord.Embed(title=f'{created_since_emodji}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ', color=0xffffff)
    embed.add_field(name=f'{slash_emodji} –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {crypto_currency} –∫ {convert_currency}',
                    value=f'{crypto_currency_emoji} –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {crypto_currency}\n'
                          f"üîÉ –†–∞–∑–Ω–∏—Ü–∞: {price_difference:,.1f}\n"
                          f'{convert_currency_emoji} –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤: {convert_currency}\n'
                          f'üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞: {change_24h}%')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto-trending', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ coinmarketcap')
async def crypto_trending(interaction: Interaction,
                          limit: int = SlashOption(
                            description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 10',
                            choices=['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
                            default=5
                          )):
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': API_Crypto,
    }

    parameters = {
        'sort': 'volume_24h',
        'limit': limit
    }

    response = requests.get(url, headers=headers, params=parameters)
    data = response.json()
    if 'data' not in data:
        await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {data}", ephemeral=True)
        return

    embed = nextcord.Embed(title=f'–¢–æ–ø {limit} –ø–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ (https://coinmarketcap.com/)', color=0xffffff)
    for crypto in data['data']:
        tags = crypto.get("tags", [])
        tags_str = ', '.join(tags)
        embed.add_field(name=f'{created_since_emodji} –ù–∞–∑–≤–∞–Ω–∏–µ: {crypto["name"]}',
                        value=f'{created_since_emodji} ID: {crypto["id"]}\n'
                              f'{created_since_emodji} –°–∏–º–≤–æ–ª: {crypto["symbol"]}\n'
                              f'{created_since_emodji} –¢–µ–≥–∏: {tags_str if tags else "–ù–µ—Ç —Ç–µ–≥–æ–≤"}\n'
                              f'{created_since_emodji} –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {crypto.get("date_added", "N/A").split("T")[0]}')
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
            icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto-info', description='–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ')
async def crypto_info(interaction: Interaction,
                      crypto: str = SlashOption(
                          description='–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                          choices=['BTC', 'ETH', 'DOGE', 'USDT', 'BUSD', 'SHIB', 'ELON', 'AKITA', 'SOL', 'BNB', 'USDC', 'XRP', 'TON', 'LTC']
                      )):
    if crypto is None:
        await interaction.response.send_message(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é!', ephemeral=True)
        return

    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'
    if crypto == 'USDT':
        crypto_emoji = USDT_emodji
    elif crypto == 'BTC':
        crypto_emoji = BTC_emodji
    elif crypto == 'DOGE':
        crypto_emoji = DOGE_emodji
    elif crypto == 'ETH':
        crypto_emoji = ETH_emodji
    elif crypto == 'BUSD':
        crypto_emoji = BUSD_emodji
    elif crypto == 'SHIB':
        crypto_emoji = SHIB_emodji
    elif crypto == 'ELON':
        crypto_emoji = ELON_emodji
    elif crypto == 'AKITA':
        crypto_emoji = AKITA_emodji
    elif crypto == 'SOL':
        crypto_emoji = SOL_emodji
    elif crypto == 'BNB':
        crypto_emoji = BNB_emodji
    elif crypto == 'USDC':
        crypto_emoji = USDC_emodji
    elif crypto == 'XRP':
        crypto_emoji = XRP_emodji
    elif crypto == 'TON':
        crypto_emoji = TON_emodji
    elif crypto == 'LTC':
        crypto_emoji = LTC_emodji
    parameters = {
        'symbol': crypto,
        'convert': 'USD'
    }

    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': API_Crypto
    }
    response = requests.get(url, headers=headers, params=parameters)
    data = response.json()
    crypto_data = data['data'][crypto]
    embed = nextcord.Embed(title=f'{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ', color=0xffffff)
    embed.add_field(name=f'{crypto_emoji} {crypto_data["name"]}',
                    value=f'{crypto_emoji} Symbol: {crypto_data["symbol"]}\n'
                          f'{crypto_emoji} ID: {crypto_data["id"]}\n'
                          f'{Right_emodji} Price: ${crypto_data["quote"]["USD"]["price"]:.2f}\n'
                          f'{Right_emodji} Market cap: ${crypto_data["quote"]["USD"]["market_cap"]:.2f}\n'
                          f'{Right_emodji} Volume 24h: ${crypto_data["quote"]["USD"]["volume_24h"]:.2f}\n'
                          f'{Right_emodji} % Change 24h: {crypto_data["quote"]["USD"]["percent_change_24h"]:.2f}%\n'
                          f'{Right_emodji} Circulating Supply: {crypto_data["circulating_supply"]}\n'
                          f'{Right_emodji} Page: https://coinmarketcap.com/currencies/{crypto_data["name"]}/')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto-list', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç')
async def crypto_list(interaction: Interaction,
                      all: bool = SlashOption(
                          description='–í—Å–µ –ª–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã?',
                          choices=['True', 'False'],
                          default=False
                      )):
    if all is False:
        embed = nextcord.Embed(title=f'{created_since_emodji} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', description=f'{created_since_emodji} **–ñ–∏—Ä–Ω—ã–º** —Ç–µ–∫—Å—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', color=0xffffff)
        embed.add_field(name=f'{text_emodji} –°–ø–∏—Å–æ–∫',
                        value=f'{BTC_emodji} **BTC** - **Bitcoin**\n'
                              f'{LTC_emodji} **LTC** - **Litecoin**\n'
                              f'{ETH_emodji} **ETH** - **Ethereum**\n'
                              f'{USDT_emodji} **USDT** - **Tether** **USD**\n'
                              f'{USDC_emodji} USDC - USDC\n'
                              f'{BNB_emodji} BNB - BNB\n'
                              f'{TON_emodji} **TON** - **Toncoin**\n'
                              f'{DOGE_emodji} DOGE - Dogecoin\n'
                              f'{BUSD_emodji} **BUSD** - **Binance USD**\n'
                              f'{ELON_emodji} ELON - ELON\n'
                              f'{AKITA_emodji} AKITA - Akita Inu\n'
                              f'{SHIB_emodji} SHIB - Shiba Inu\n'
                              f'{XRP_emodji} **XRP** - **XRP**'
                        )
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
            icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
        await interaction.response.send_message(embed=embed, ephemeral=True)
    if all is True:
        url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'
        headers = {
            'Accepts': 'application/json',
            'X-CMC_PRO_API_KEY': API_Crypto
        }

        response = requests.get(url, headers=headers)
        data = response.json()

        if response.status_code == 200:
            cryptocurrencies = [f"{created_since_emodji} **{crypto['name']} - {crypto['symbol']} ({crypto.get('date_added', 'N/A').split('T')[0]}) [{crypto['quote']['USD']['percent_change_24h']:.2f}%]**"
                                for crypto in data['data']]
        else:
            interaction.response.send_message(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥: {response.status_code}')
        embed = nextcord.Embed(title=f'{created_since_emodji} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
                               description=f'\n'.join(cryptocurrencies[:50]),
                               color=0xffffff)
        embed.set_footer(
            text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
            icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
        await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto', description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
async def crypto(interaction: Interaction):
    embed = nextcord.Embed(title='–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º crypto', color=0xffffff)
    embed.add_field(name=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Crypto-info',
                    value=f'{created_since_emodji} /crypto-info crypto:x\n'
                          f'{created_since_emodji} x - –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n'
                          f'{created_since_emodji} –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n',
                    inline=False)
    embed.add_field(name=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Crypto-exchange',
                    value=f'{created_since_emodji} /crypto-exchange name:x\n'
                          f'{created_since_emodji} x - –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏ –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n'
                          f'{created_since_emodji} –í–≤–æ–¥–∏—Ç—å –±–∏—Ä–∂—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ lowercase —Ç–∏–ø–æ–º. –ü—Ä–∏–º–µ—Ä: binance',
                    inline=False)
    embed.add_field(name=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Crypto-list',
                    value=f'{created_since_emodji} /crypto-list all:True, False\n'
                          f'{created_since_emodji} True - –í—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 50 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                          f'{created_since_emodji} False - –í—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ /crypto-info',
                    inline=False)
    embed.add_field(name=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Crypto-difference',
                    value=f'{created_since_emodji} /crypto-difference crypto:x convert:y\n'
                          f'{created_since_emodji} x - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É\n'
                          f'{created_since_emodji} y - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é',
                    inline=False)
    embed.add_field(name=f'{created_since_emodji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Crypto-image',
                    value=f'{created_since_emodji} /crypto image:id\n'
                          f'{created_since_emodji} id - –≤–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏\n'
                          f'{created_since_emodji} –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ /crypto-info')
    if nextcord.utils.get(interaction.user.roles, name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'):
        embed.add_field(name=f'{created_since_emodji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Crypto-admin',
                        value=f'{created_since_emodji} /crypto-admin\n'
                              f'{created_since_emodji} –í—ã–≤–µ–¥–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ api –∫–ª—é—á–∞',
                        inline=False)
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto-admin', description='–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º API –∫–ª—é—á–µ')
async def crypto_admin(interaction: Interaction):
    url = 'https://pro-api.coinmarketcap.com/v1/key/info'
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': API_Crypto
    }
    response = requests.get(url, headers=headers)
    data = response.json()
    crypto_status = data['status']
    crypto_data = data['data']
    embed = nextcord.Embed(title=f'Api key: {API_Crypto}', color=0xffffff)
    embed.add_field(name=f'{created_since_emodji} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:',
                    value=f'{created_since_emodji} –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: <t:{int(datetime.datetime.fromisoformat(crypto_status["timestamp"].replace("Z", "")).timestamp())}:R>(–í—Ä–µ–º—è UTC+4)\n'
                          f'{created_since_emodji} –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {crypto_status["elapsed"]} —Å–µ–∫.\n'
                          f'{created_since_emodji} –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ (–º–µ—Å—è—Ü): {crypto_data["plan"]["credit_limit_monthly"]}\n'
                          f'{created_since_emodji} –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤ (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ): {crypto_data["plan"]["credit_limit_monthly_reset"]}\n'
                          f'{created_since_emodji} –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤ (–∫–æ–≥–¥–∞): <t:{int(datetime.datetime.fromisoformat(crypto_data["plan"]["credit_limit_monthly_reset_timestamp"].replace("Z", "")).timestamp())}:R>\n'
                          f'{created_since_emodji} –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–º–∏–Ω—É—Ç–∞): {crypto_data["plan"]["rate_limit_minute"]}\n'
                          f'{created_since_emodji} –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤ (–º–µ—Å—è—Ü): {crypto_data["usage"]["current_month"]["credits_left"]}\n'
                          f'{created_since_emodji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ (—Å–µ–≥–æ–¥–Ω—è): {crypto_data["usage"]["current_day"]["credits_used"]}\n'
                          f'{created_since_emodji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ (–º–µ—Å—è—Ü): {crypto_data["usage"]["current_month"]["credits_used"]}')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto-exchange',
                              description='–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–µ')
async def crypto_exchange(interaction: Interaction,
                          name: str = SlashOption(
                              description='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏. –ü—Ä–∏–º–µ—Ä: binance. –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã. '
                          )):
    url = 'https://pro-api.coinmarketcap.com/v1/exchange/info'
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': API_Crypto
    }
    params = {
        'slug': name
    }
    response = requests.get(url, headers=headers, params=params)
    data = response.json()
    try:
        exchange_data = data['data'][name]
    except KeyError:
        await interaction.response.send_message(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏. –í–≤–µ–¥–µ–Ω–æ: {name}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', ephemeral=True)
        return
    embed = nextcord.Embed(title=f'{created_since_emodji} –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞: {exchange_data["name"]}', color=0xffffff)
    embed.set_thumbnail(url=exchange_data['logo'])
    embed.add_field(name=f'{created_since_emodji} –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    value=f'{created_since_emodji} –ù–∞–∑–≤–∞–Ω–∏–µ: {exchange_data["name"]}\n'
                          f'{created_since_emodji} ID: {exchange_data["id"]}\n'
                          f'{created_since_emodji} Lowercase: {exchange_data["slug"]}\n'
                          f'{created_since_emodji} –í–∞–ª—é—Ç—ã: {", ".join(exchange_data["fiats"])}\n'
                          f'{created_since_emodji} –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <t:{int(datetime.datetime.fromisoformat(exchange_data["date_launched"].replace("Z", "")).timestamp())}:R>\n'
                          f'{created_since_emodji} –ü–æ—Å–µ—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é: {exchange_data["weekly_visits"]:,.0f}\n'
                          f'{created_since_emodji} –û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (USD): {exchange_data["spot_volume_usd"]:,.1f}\n'
                          f'{created_since_emodji} –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤: <t:{int(datetime.datetime.fromisoformat(exchange_data["spot_volume_last_updated"].replace("Z", "")).timestamp())}:R>')
    embed.add_field(name='–°—Å—ã–ª–∫–∏',
                    value=f'{link_emodji} –ß–∞—Ç: [–¢—ã–∫]({"".join(exchange_data["urls"]["chat"])})\n'
                          f'{link_emodji} –°–∞–π—Ç: [–¢—ã–∫]({"".join(exchange_data["urls"]["website"])})\n'
                          f'{link_emodji} –¢–≤–∏—Ç—Ç–µ—Ä (X): [–¢—ã–∫]({"".join(exchange_data["urls"]["twitter"])})\n'
                          f'{link_emodji} –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: [–¢—ã–∫]({"".join(exchange_data["urls"]["fee"])})')
    embed.set_footer(
        text=f'‚Ä¢ {servername_to_footer} Crypto | https://coinmarketcap.com/ | {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}',
        icon_url='https://logos-world.net/wp-content/uploads/2023/02/CoinMarketCap-Logo.png')
    await interaction.response.send_message(embed=embed, ephemeral=True)


@client_discord.slash_command(name='crypto-image', description='–í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
async def crypto_image(interaction: Interaction,
                       id: str = SlashOption(
                           description='–í–≤–µ–¥–∏—Ç–µ id –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ /crypto-info'
                       )):
    url = 'https://pro-api.coinmarketcap.com/v2/cryptocurrency/info'
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': API_Crypto
    }
    params = {
        'id': id
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()
        image = data['data'][id]['logo']
        await interaction.response.send_message(image)
    else:
        await interaction.response.send_message(f'–û—à–∏–±–∫–∞. Code: {response.status_code}', ephemeral=True)
try:
    client_discord.run(TOKEN)
except Exception as e:
    print(f'Error {e}')
    client_discord.run(TOKEN)
